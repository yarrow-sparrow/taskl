FORMAT: 1A
HOST: localhost:8080

# Taskl

application/json is used in all endpoints

To access secured endpoints (all, except Sing-up and Sign-in) you need to attach bearer token in authorization header

Bearer token is received in Sign-in response

## Sign-up [/api/v1/auth/signup]

### Sign-up user [POST]

+ Request

        {
            "username": "Claudia",
            "email": "some-cool@email.com",
            "password": "p@assmetheword"
        }

+ Response 200

## Login [/api/v1/auth/login]

### Login user [POST]

+ Request

        {
            "email": "some-cool@email.com",
            "password": "p@assmetheword"
        }

+ Response 200

        {
            "token": "OAuth2 token",
            "user": {
                "id": "1",
                "username": "Claudia",
                "initials": "CL",
                "email": "some-cool@email.com",
                "telegram": "@tag",
                "role": "designer",
                "storyPointsPerWeek": 15.1
            }
        }

+ Response 401

## User collection [/api/v1/user]

### Get all users [GET]

Simply needed for adding users to projects

+ Response 200

        {
            "users": [
                {
                    "id": "1",
                    "username": "Claudia",
                    "initials": "CL",
                    "email": "some-cool@email.com",
                    "telegram": "@tag",
                    "role": "designer",
                    "storyPointsPerWeek": 15.1
                }
            ]
        }

## Specific user collection [/api/v1/user/{userId}]

### Get specific user [GET]

+ Response 200

        {
            "id": "1",
            "username": "Claudia",
            "initials": "CL",
            "email": "some-cool@email.com",
            "telegram": "@tag",
            "role": "designer",
            "storyPointsPerWeek": 15.1,
            "mutualProjects": [
                {
                    "id": "1",
                    "name": "Coolest project 1",
                    "description": "Project blah"
                }
            ]
        }

## Project collection [/api/v1/project]

### Get all projects user participate in [GET]

+ Response 200

        {
            "projects": [
                {
                    "id": "1",
                    "name": "Coolest project 1",
                    "description": "Project blah"
                }
            ]
        }

### Create project adding creator to it [POST]

Creator will be added to the project regardless of participants field

+ Request

        {
            "name": "Coolest project",
            "description": "Project blah",
            "memberUserIds": [1, 2, 3]
        }

+ Response 201

## Specific project collection [/api/v1/project/{projectId}]

### Get project [GET]

User ids do not contain the id of the user himself

+ Response 200

        {
            "id": 1,
            "name": "Coolest project",
            "description": "Project blah",
            "memberUsers": [
                {
                    "id": 1,
                    "username": "Claudia,
                    "initials": "CL"
                }
            ]
        }

### Update project [PUT]

+ Request

        {
            "name": "Coolest project",
            "description": "Project blah",
            "memberUserIds": [1, 2, 3]
        }

+ Response 200

## Task collection [/api/v1/project/{projectId}/task]

### Get all tasks from project [GET]

+ Response 200

        {
            "tasks": [
                {
                    "id": 1,
                    "name": "Coolest task 1",
                    "description": "Task blah",
                    "assigneeUser": {
                        "id": 1,
                        "username": "Claudia",
                        "initials": "CL"
                    },
                    "status": "ARCHIVE",
                    "storyPoints": 0.1,
                    "daysLeft": 14
                }
            ]
        }

### Create task in project [POST]

+ Request

        {
            "name": "Coolest task 1",
            "description": "Task blah",
            "assigneeUserId": 1,
            "status": "ARCHIVE",
            "storyPoints": 0.1,
            "deadline": "2023-08-23"
        }

+ Response 201

## Specific task collection [/api/v1/project/{projectId}/task/{taskId}]

### Update task [PUT]

+ Request

        {
            "name": "Coolest task 1",
            "description": "Task blah",
            "assigneeUserId": 1,
            "status": "Archive",
            "storyPoints": 0.1,
            "deadline": "2023-08-23"
        }

+ Response 200

## Task notes collection [/api/v1/project/{projectId}/task/{taskId}/note]

### Get task notes [GET]

+ Response 200

        {
            "users": [
                {
                    "id": 1,
                    "username": "Claudia",
                    "initials": "CL"
                }
            ],
            "notes": [
                {
                    "id": 1,
                    "authorUserId": 1,
                    "text": "Some blah about blah"
                }
            ]
        }

### Send task note [POST]

+ Request

        {
            "text": "Some text about some things"
        }

+ Response 200

## Specific task note collection [/api/v1/project/{projectId}/task/{taskId}/note/{noteId}]

### Update task note [PUT]

+ Request

        {
            "text": "Some text about some things"
        }

+ Response 200

## User notes collection [/api/v1/note]

### Get user notes [GET]

+ Response 200

        {
            "notes": [
                {
                    "id": 1,
                    "text": "Some blah about blah"
                }
            ]
        }

### Send task note [POST]

+ Request

        {
            "text": "Some text about some things"
        }

+ Response 200

## Specific user note collection [/api/v1/note/{noteId}]

### Update task note [PUT]

+ Request

        {
            "text": "Some text about some things"
        }

+ Response 200
